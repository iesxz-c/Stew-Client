import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  ChakraProvider,
  Container,
  Box,
  Input,
  Button,
  Text,
  VStack,
  HStack,
  Heading,
  StackDivider,
  useToast,
} from '@chakra-ui/react';

function TimeTable() {
  const [timetables, setTimetables] = useState([]);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [startTime, setStartTime] = useState('');
  const [endTime, setEndTime] = useState('');
  const [color, setColor] = useState('');
  const [editId, setEditId] = useState(null);
  const toast = useToast();

  useEffect(() => {
    fetchTimetables();
  }, []);

  const fetchTimetables = async () => {
    try {
      const response = await axios.get('http://localhost:5000/timetable/list', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`, // Ensure you have a valid token stored
        },
      });
      setTimetables(response.data);
    } catch (error) {
      console.error('Failed to fetch timetables:', error);
      toast({
        title: 'Error fetching data',
        description: 'Could not fetch timetables.',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const handleCreateOrUpdate = async () => {
    const payload = {
      title,
      description,
      start_time: startTime,
      end_time: endTime,
      color,
    };

    try {
      if (editId) {
        await axios.put(`http://localhost:5000/timetable/edit/${editId}`, payload, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        });
        toast({
          title: 'Success',
          description: 'Timetable updated successfully!',
          status: 'success',
          duration: 3000,
          isClosable: true,
        });
        setEditId(null);
      } else {
        await axios.post('http://localhost:5000/timetable/create', payload, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        });
        toast({
          title: 'Success',
          description: 'Timetable created successfully!',
          status: 'success',
          duration: 3000,
          isClosable: true,
        });
      }
      clearForm();
      fetchTimetables();
    } catch (error) {
      console.error('Failed to create or update timetable:', error);
      toast({
        title: 'Error',
        description: 'Failed to create or update timetable.',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const handleDelete = async (id) => {
    try {
      await axios.delete(`http://localhost:5000/timetable/delete/${id}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });
      toast({
        title: 'Deleted',
        description: 'Timetable deleted successfully!',
        status: 'info',
        duration: 3000,
        isClosable: true,
      });
      fetchTimetables();
    } catch (error) {
      console.error('Failed to delete timetable:', error);
      toast({
        title: 'Error',
        description: 'Failed to delete timetable.',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const handleEdit = (entry) => {
    setTitle(entry.title);
    setDescription(entry.description);
    setStartTime(entry.start_time);
    setEndTime(entry.end_time);
    setColor(entry.color);
    setEditId(entry.id);
  };

  const clearForm = () => {
    setTitle('');
    setDescription('');
    setStartTime('');
    setEndTime('');
    setColor('');
    setEditId(null);
  };

  return (
    <ChakraProvider>
      <Container maxW="container.lg" p={5}>
        <Heading mb={5}>Timetable Manager</Heading>
        <VStack spacing={4} mb={5}>
          <Input
            placeholder="Title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
          <Input
            placeholder="Description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />
          <Input
            placeholder="Start Time (ISO Format)"
            value={startTime}
            onChange={(e) => setStartTime(e.target.value)}
          />
          <Input
            placeholder="End Time (ISO Format)"
            value={endTime}
            onChange={(e) => setEndTime(e.target.value)}
          />
          <Input
            placeholder="Color (optional)"
            value={color}
            onChange={(e) => setColor(e.target.value)}
          />
          <Button colorScheme="teal" onClick={handleCreateOrUpdate}>
            {editId ? 'Update Timetable' : 'Create Timetable'}
          </Button>
        </VStack>
        <VStack
          spacing={4}
          divider={<StackDivider borderColor="gray.200" />}
          align="stretch"
        >
          {timetables.map((entry) => (
            <Box key={entry.id} p={4} borderWidth="1px" borderRadius="lg">
              <Text>
                <strong>Title:</strong> {entry.title}
              </Text>
              <Text>
                <strong>Description:</strong> {entry.description || 'N/A'}
              </Text>
              <Text>
                <strong>Start Time:</strong> {entry.start_time}
              </Text>
              <Text>
                <strong>End Time:</strong> {entry.end_time}
              </Text>
              <Text>
                <strong>Color:</strong> {entry.color || 'Default'}
              </Text>
              <HStack mt={3}>
                <Button
                  size="sm"
                  colorScheme="yellow"
                  onClick={() => handleEdit(entry)}
                >
                  Edit
                </Button>
                <Button
                  size="sm"
                  colorScheme="red"
                  onClick={() => handleDelete(entry.id)}
                >
                  Delete
                </Button>
              </HStack>
            </Box>
          ))}
        </VStack>
      </Container>
    </ChakraProvider>
  );
}

export default TimeTable;
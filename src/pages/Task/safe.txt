import React, { useState, useEffect } from 'react';
import { ChakraProvider, Box, Button, Input, Stack, Text } from '@chakra-ui/react';
import { createTask, getTasks, completeTask, deleteTask } from './api';
import TaskCard from './TaskCard';
import ScoreGraph from './ScoreGraph';
import ScoreCircles from './ScoreCircles'
function Task() {
    const [tasks, setTasks] = useState([]);
    const [title, setTitle] = useState('');
    const [description, setDescription] = useState('');
    const [deadline, setDeadline] = useState('');
    const [token, setToken] = useState('');

    // Get token from localStorage when the component mounts
    useEffect(() => {
        const storedToken = localStorage.getItem('token');
        if (storedToken) {
            setToken(storedToken);
            fetchTasks(storedToken);
        } else {
            console.error('No token found. Please log in.');
        }
    }, []);

    const fetchTasks = async (authToken) => {
        try {
            const response = await getTasks(authToken);
            setTasks(response.data);
        } catch (error) {
            console.error('Error fetching tasks:', error);
        }
    };

    const handleCreateTask = async () => {
        if (!title || !deadline) {
            console.error('Title and deadline are required.');
            return;
        }

        try {
            // Create a Date object and convert it to ISO string
            const isoDeadline = new Date(deadline).toISOString();
            await createTask({ title, description, deadline: isoDeadline }, token);
            setTitle('');
            setDescription('');
            setDeadline('');
            fetchTasks(token);
        } catch (error) {
            console.error('Error creating task:', error);
        }
    };

    const handleCompleteTask = async (taskId) => {
        try {
            await completeTask(taskId, token);
            fetchTasks(token);
        } catch (error) {
            console.error('Error completing task:', error);
        }
    };

    const handleDeleteTask = async (taskId) => {
        try {
            await deleteTask(taskId, token);
            setTasks(tasks.filter(task => task.id !== taskId));
        } catch (error) {
            console.error('Error deleting task:', error);
        }
    };

    const scores = tasks.map(task => task.score);

    return (
        <ChakraProvider>
            <Box p={4}>
                <Text fontSize="2xl" fontWeight="bold" mb={4}>Task Manager</Text>
                <Stack spacing={3} mb={4}>
                    <Input
                        placeholder="Task Title"
                        value={title}
                        onChange={(e) => setTitle(e.target.value)}
                    />
                    <Input
                        placeholder="Description"
                        value={description}
                        onChange={(e) => setDescription(e.target.value)}
                    />
                    <Input
                        type="datetime-local"
                        placeholder="Deadline"
                        value={deadline}
                        onChange={(e) => setDeadline(e.target.value)}
                    />
                    <Button colorScheme="blue" onClick={handleCreateTask}>
                        Create Task
                    </Button>
                </Stack>
                <Box my={4}>
                    <Text fontSize="lg" fontWeight="bold">Tasks</Text>
                    {tasks.map(task => (
                        <TaskCard
                            key={task.id}
                            task={task}
                            onComplete={handleCompleteTask}
                            onDelete={handleDeleteTask}
                        />
                    ))}
                </Box>
                <Box my={4}>
                    <Text fontSize="lg" fontWeight="bold">Score Progress</Text>
                    <ScoreGraph scores={scores} />
                </Box>
                <ScoreCircles></ScoreCircles>
            </Box>
        </ChakraProvider>
    );
}

export default Task;